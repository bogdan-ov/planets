THREE.OBJLoader=function(){function t(){var t={objects:[],object:{},vertices:[],normals:[],colors:[],uvs:[],materials:{},materialLibraries:[],startObject:function(t,e){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=t,void(this.object.fromDeclaration=!1!==e);var r=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:t||"",fromDeclaration:!1!==e,geometry:{vertices:[],normals:[],colors:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(t,e){var r=this._finalize(!1);r&&(r.inherited||r.groupCount<=0)&&this.materials.splice(r.index,1);var i={index:this.materials.length,name:t||"",mtllib:Array.isArray(e)&&e.length>0?e[e.length-1]:"",smooth:void 0!==r?r.smooth:this.smooth,groupStart:void 0!==r?r.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(t){var e={index:"number"==typeof t?t:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return e.clone=this.clone.bind(e),e}};return this.materials.push(i),i},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(t){var e=this.currentMaterial();if(e&&-1===e.groupEnd&&(e.groupEnd=this.geometry.vertices.length/3,e.groupCount=e.groupEnd-e.groupStart,e.inherited=!1),t&&this.materials.length>1)for(var r=this.materials.length-1;r>=0;r--)this.materials[r].groupCount<=0&&this.materials.splice(r,1);return t&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),e}},r&&r.name&&"function"==typeof r.clone){var i=r.clone(0);i.inherited=!0,this.object.materials.push(i)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(t,e){var r=parseInt(t,10);return 3*(r>=0?r-1:r+e/3)},parseNormalIndex:function(t,e){var r=parseInt(t,10);return 3*(r>=0?r-1:r+e/3)},parseUVIndex:function(t,e){var r=parseInt(t,10);return 2*(r>=0?r-1:r+e/2)},addVertex:function(t,e,r){var i=this.vertices,s=this.object.geometry.vertices;s.push(i[t+0],i[t+1],i[t+2]),s.push(i[e+0],i[e+1],i[e+2]),s.push(i[r+0],i[r+1],i[r+2])},addVertexPoint:function(t){var e=this.vertices,r=this.object.geometry.vertices;r.push(e[t+0],e[t+1],e[t+2])},addVertexLine:function(t){var e=this.vertices,r=this.object.geometry.vertices;r.push(e[t+0],e[t+1],e[t+2])},addNormal:function(t,e,r){var i=this.normals,s=this.object.geometry.normals;s.push(i[t+0],i[t+1],i[t+2]),s.push(i[e+0],i[e+1],i[e+2]),s.push(i[r+0],i[r+1],i[r+2])},addColor:function(t,e,r){var i=this.colors,s=this.object.geometry.colors;s.push(i[t+0],i[t+1],i[t+2]),s.push(i[e+0],i[e+1],i[e+2]),s.push(i[r+0],i[r+1],i[r+2])},addUV:function(t,e,r){var i=this.uvs,s=this.object.geometry.uvs;s.push(i[t+0],i[t+1]),s.push(i[e+0],i[e+1]),s.push(i[r+0],i[r+1])},addUVLine:function(t){var e=this.uvs,r=this.object.geometry.uvs;r.push(e[t+0],e[t+1])},addFace:function(t,e,r,i,s,a,o,n,l){var h=this.vertices.length,c=this.parseVertexIndex(t,h),u=this.parseVertexIndex(e,h),p=this.parseVertexIndex(r,h);if(this.addVertex(c,u,p),this.colors.length>0&&this.addColor(c,u,p),void 0!==i&&""!==i){var m=this.uvs.length;c=this.parseUVIndex(i,m),u=this.parseUVIndex(s,m),p=this.parseUVIndex(a,m),this.addUV(c,u,p)}if(void 0!==o&&""!==o){var f=this.normals.length;c=this.parseNormalIndex(o,f),u=o===n?c:this.parseNormalIndex(n,f),p=o===l?c:this.parseNormalIndex(l,f),this.addNormal(c,u,p)}},addPointGeometry:function(t){this.object.geometry.type="Points";for(var e=this.vertices.length,r=0,i=t.length;r<i;r++)this.addVertexPoint(this.parseVertexIndex(t[r],e))},addLineGeometry:function(t,e){this.object.geometry.type="Line";for(var r=this.vertices.length,i=this.uvs.length,s=0,a=t.length;s<a;s++)this.addVertexLine(this.parseVertexIndex(t[s],r));var o=0;for(a=e.length;o<a;o++)this.addUVLine(this.parseUVIndex(e[o],i))}};return t.startObject("",!1),t}function e(t){THREE.Loader.call(this,t),this.materials=null}var r=/^[og]\s*(.+)?/,i=/^mtllib /,s=/^usemtl /,a=/^usemap /;return e.prototype=Object.assign(Object.create(THREE.Loader.prototype),{constructor:e,load:function(t,e,r,i){var s=this,a=new THREE.FileLoader(s.manager);a.setPath(this.path),a.load(t,function(t){e(s.parse(t))},r,i)},setMaterials:function(t){return this.materials=t,this},parse:function(e){var o=new t;-1!==e.indexOf("\r\n")&&(e=e.replace(/\r\n/g,"\n")),-1!==e.indexOf("\\\n")&&(e=e.replace(/\\\n/g,""));for(var n=e.split("\n"),l="",h="",c=0,u=[],p="function"==typeof"".trimLeft,m=0,f=n.length;m<f;m++)if(l=n[m],l=p?l.trimLeft():l.trim(),c=l.length,0!==c&&(h=l.charAt(0),"#"!==h))if("v"===h){var d=l.split(/\s+/);switch(d[0]){case"v":o.vertices.push(parseFloat(d[1]),parseFloat(d[2]),parseFloat(d[3])),d.length>=7&&o.colors.push(parseFloat(d[4]),parseFloat(d[5]),parseFloat(d[6]));break;case"vn":o.normals.push(parseFloat(d[1]),parseFloat(d[2]),parseFloat(d[3]));break;case"vt":o.uvs.push(parseFloat(d[1]),parseFloat(d[2]))}}else if("f"===h){for(var v=l.substr(1).trim(),g=v.split(/\s+/),b=[],E=0,j=g.length;E<j;E++){var x=g[E];if(x.length>0){var y=x.split("/");b.push(y)}}var T=b[0];for(E=1,j=b.length-1;E<j;E++){var L=b[E],R=b[E+1];o.addFace(T[0],L[0],R[0],T[1],L[1],R[1],T[2],L[2],R[2])}}else if("l"===h){var H=l.substring(1).trim().split(" "),w=[],V=[];if(-1===l.indexOf("/"))w=H;else for(var M=0,F=H.length;M<F;M++){var I=H[M].split("/");""!==I[0]&&w.push(I[0]),""!==I[1]&&V.push(I[1])}o.addLineGeometry(w,V)}else if("p"===h){v=l.substr(1).trim();var A=v.split(" ");o.addPointGeometry(A)}else if(null!==(u=r.exec(l))){var P=(" "+u[0].substr(1).trim()).substr(1);o.startObject(P)}else if(s.test(l))o.object.startMaterial(l.substring(7).trim(),o.materialLibraries);else if(i.test(l))o.materialLibraries.push(l.substring(7).trim());else if(a.test(l))console.warn('THREE.OBJLoader: Rendering identifier "usemap" not supported. Textures must be defined in MTL files.');else if("s"===h){if(u=l.split(" "),u.length>1){var z=u[1].trim().toLowerCase();o.object.smooth="0"!==z&&"off"!==z}else o.object.smooth=!0;var B=o.object.currentMaterial();B&&(B.smooth=o.object.smooth)}else{if("\0"===l)continue;console.warn('THREE.OBJLoader: Unexpected line: "'+l+'"')}o.finalize();var O=new THREE.Group;O.materialLibraries=[].concat(o.materialLibraries);for(m=0,f=o.objects.length;m<f;m++){var C=o.objects[m],U=C.geometry,_=C.materials,G="Line"===U.type,N="Points"===U.type,S=!1;if(0!==U.vertices.length){var D=new THREE.BufferGeometry;D.setAttribute("position",new THREE.Float32BufferAttribute(U.vertices,3)),U.normals.length>0?D.setAttribute("normal",new THREE.Float32BufferAttribute(U.normals,3)):D.computeVertexNormals(),U.colors.length>0&&(S=!0,D.setAttribute("color",new THREE.Float32BufferAttribute(U.colors,3))),U.uvs.length>0&&D.setAttribute("uv",new THREE.Float32BufferAttribute(U.uvs,2));for(var J,k=[],q=0,K=_.length;q<K;q++){var Q=_[q],W=Q.name+"_"+Q.smooth+"_"+S;B=o.materials[W];if(null!==this.materials)if(B=this.materials.create(Q.name),!G||!B||B instanceof THREE.LineBasicMaterial){if(N&&B&&!(B instanceof THREE.PointsMaterial)){var X=new THREE.PointsMaterial({size:10,sizeAttenuation:!1});THREE.Material.prototype.copy.call(X,B),X.color.copy(B.color),X.map=B.map,B=X}}else{var Y=new THREE.LineBasicMaterial;THREE.Material.prototype.copy.call(Y,B),Y.color.copy(B.color),B=Y}void 0===B&&(B=G?new THREE.LineBasicMaterial:N?new THREE.PointsMaterial({size:1,sizeAttenuation:!1}):new THREE.MeshPhongMaterial,B.name=Q.name,B.flatShading=!Q.smooth,B.vertexColors=S,o.materials[W]=B),k.push(B)}if(k.length>1){for(q=0,K=_.length;q<K;q++){Q=_[q];D.addGroup(Q.groupStart,Q.groupCount,q)}J=G?new THREE.LineSegments(D,k):N?new THREE.Points(D,k):new THREE.Mesh(D,k)}else J=G?new THREE.LineSegments(D,k[0]):N?new THREE.Points(D,k[0]):new THREE.Mesh(D,k[0]);J.name=C.name,O.add(J)}}return O}}),e}();